

===========================April 1st=================================================================================================================================
experssions, statements (simple), and prodecure/func calls

IDS in Pascal are cae-insensitive (incl keywords)  -- converted to initial caps

lib90, lib100, pascal "built-in" functions we will be calling

compatible with c calling convention (can call c funcs from Pascal & vice versa)

amung the simple types:
Ordinal Types : values are in a linearly ordered sequence : each value (except max) has a unique successor, and a unique predecessor (except min value)
       Ordinal Types: Integer, Char, Boolean, Enumerated Types (we are not supporting these), subranges of these
       Support: succ -- successor function
                pred -- predecessor function
                subranges
                ord -- Integer value of an ordinal type value
                        Integer : identity func
                        Char : ASCII value
                        Boolean : 0 for FALSE,  1 for TRUE
                chr : Integer ----> Char

Expresion vs a statement
Expr has a value, statement does not (side effects)

Parsing exprs and building syntax trees
Parsing simple statements
function call is considered a expression
precudere considered a statement

Store TYPE of an expression in its root node
Distinguish between l-values and r-values
l-value is always stored as a pointer (location)

l-values:  declared variables (even arrays, at least in Pascal)
            p^ (postfix ^*hat* operator)
            pointer var     ,indication operator, like *p in C

r-values : everything else

l-value -> r_value : DEREF(type)   you need to know the type

Runtime model of expression evaluation: a stack machine
To generate code to evaluate an expression, you traverse the syntax tree bottom up:
      leaf node: push the value onto the stack
                  -- var reference -- push the address (cuz its an l-value)
                  -- constant ------- push the r-value
      function call:
                  -- recursively evaluate each actual argument and place it in the proper location
                        generate call statement, push return value onto the stack
      operator node:
                  -- stack contains args to the operator (operands). Pop these off, apply the operator to these values, and push on the result
                  --unary operator, pop one thing off the stack
                  --binary operator, pop two things off the stack
_______________________________________________________
Net result of evaluating an expression:
    return value is pushed onto the stack (single push)


two kinds of simple statements   (simple statements leave the stack unchanged)
    assignment
    procedure call (just like a func call, but stack is unchanged)

    l-value := r-value   (need to be compatiable, can convert right-hand type into left-hand type, if needed)
                    assume simple types (no array assignments, legal in Pascal, but we arent doing)

    evalue left hand side as a l-value, then
    evaluate right hand side as a r-value
    place r-value at location specified by the l-value (after converting if nescicary)

    WE ARE NOT DOING THIS, WE ARE EMMITING CODE THAT WILL DO THIS AT RUN TIME
____________________
Backend routines (backend-x86.h)
    Look for "Routines for Project 2"

All of these don't pop anything:
  b_push_ext_addr(char *id)
      pushes the addr of id onto stack
        (id must be emitted as a label at some point, i.e., b_global_decl())
      use to evaluate variable references in expressions

  b_push_loc_addr(int offset)
      -- params and local vars (offset from frame pointer)

  b_push_const_int(int value)
      --use for integer and ordinal types

  b_push_const_double(double value)
      --single and Real types(convert to double)

  b_push_const_string(char *string)


Unary ops (1 item popped):

  b_offest(int offset)
      -- assumes some address is on stack. will pop that address, add the offset to it, and push the other address back on. ??What is "the other address"??
      -- NOT SURE IF USED
      -- other uses: pointer to frame pointer

  b_deref(TYPETAG type)
      -- assumes a pointer is on the stack, goes to that location, looks at the data there, assumes its of the data defined by "type", gets its value and pushes
          that value onto the stack

  b_convert(TYPETAG from_type, TYPETAG to_type)
      -- assumes that there is a value of type "from_type" on the stack and converts it to the type to_type and pushes the converted value back onto the stack

  b_negates(TYPETAG type)
      -- unary minus (type is integer or real because the machine level operation of negation is different for the two types)

  b_inc_dec(...)
      -- increment and decrement - doesn't exist in Pascal so NOT USED

Binary ops (2 items popped)

  b_assign(TYPETAG type)
      --use for assignments. Assumes there are two things on the stack. The top of the stack is the right hand
        side of the assignment(the value(already converted to type of the left)) and underneath is the address
        of the left hand side of the assignment. Puts the value that was assigned back on the stack. we don't want this in Pascal because,
        unlike in C, Pascal assignments are statements, not expressions, meaning they have no return value. Therefore we need to remove the
        assigned value from the stack after an assignment. To do this we call b_pop().

  b_arith_rel_op(B_ARITH_REL_OP arop, TYPETAG type)
      --handles all binary arithmetic operators and relational operators
            --two operands are assumed to be of the same "type"
            --relational operators return booleans
            --arithmetic operators take numbers

  b_funcal_by_name(char *f_name, TYPETAG return_type)
      --he said you have to prepare the stack for a function call by loading the arguments onto it, then this calls the function call by name but you
        have to specify the expected return type

_________________________________________
Type conversions
      unary conversions
      binary conversions
      assignment conversions
      parameter conversions

      all expect r-val and return r-val, so if there is an l-val you have to dereference it.

      unary - do first for all operands of an operator.
              only one in Pascal: Single --> Real a.k.a. float --> double

      binary - before a binary operator is applied:
                    -first unary convert operands as above
                    -binary convert the each operand based on the type of the other operand
                            Ex:     Real + Integer  ==>  Integer first needs to be converted to Real
                                    Only allowed binary conversion in Pascal: Integer ==> Real

      assignment conversion - convert type of RHS of assignment to that of the LHS



      ---------------OUT OF TIME--------------------


============================April 6th=================================================================================================================================
*declare vars*
function foo(a:INTEGER; var b :REAL): CHAR;

z := foo(x+36, y)
    expecting an *&^ val        (y: must be l-vlaue, do not convert to r-value)
    (deref is necssisary)

when generating code for a function call:
h_alloc_arglist(size)  <--- could just be #args * 8 (8 is max size of any arg)

**STACK**
|_______|
| val   |
|-------|
| size  |  ^ lower address
|-------| <--
|_______|  V higher address


for each actual argumetn (left tp right)
    -generate code to evaluate expression
    -b_load_arg(type tag)         (updates internal counters for back-end, to place in a new place each call instead of overwriting)
end_for
b_funcall_by_name("foo")

*we will need to handle promoting types: like int->real  single->real, ect***

h_alloc_arglist()   and   b_funccall_by_name()
must be matching like opening and closing delimiters EX: "{"and"}"  (even if no arguments)
---function calls can be nested
    EX:   z := foo(x+bar(c), y)

procedures and function decls and definitions:
function_declarations:

function foo(...).Char:External;
    install in symbol table as a GDECL
        storage class is SC_EXTERNAL (possibly EXTERN, or something)
        check_args flag should be FALSE   (for external functions)   --- check args is in the TYPE, not in symtable directly
            (compiler will NOT check arg types and number of args for external functions)

function bar(....) : REAL; Forward   (expected to be defined later on)
            for when functions call eachother and have to be defined in sequence
            installed as a GDECL but with SC_NOSC and cheack_args flag TRUE
                (compiler will check args)
-------------------
function_delaration:
    function_heading semi
        { install function name FDECL
            two possibilities:
                if function name is not already in symbol table: then install it as a fresh FDECL
                if already in the symbolTAB (st_lookup returns a record ST_DR)
                    only allowed situation is previous installment was a GDECL of a function of the same type that is not external
                        this would be a forward decl (look at the storage class)
                    anything else is a symantic error
                        if FDECL then duplicate declaration
                        not a function
                        func but wrong args or return type (dont match)

        st_enter_block()
            enters a new namespace or new "scope"
            any decls from now on are local

            b_init_formal_param_offset()
            install parameters into the symbol table as PDECL (left to right)
                    with offsets (ints)(from the currrent frame pointer at runtime)

            offset value is obtained by calling b_get_formal_param_offset(type tag)  offset is installed in table?!
        }

    any_declaration_part:
        //we wont deal with local consts
        var decl part only
        {
        install vars as local using LDECL
        st_get_block() is greater than 1, then you are in a local block
            block 0 is for installing integer and REAL, ect (install scope)
            global block is 1
        store by offset, computer these ourselves

**STACK**
|_______|
| local |
| vars  |       *offset is 8 byte aligned
|-------| <---- offset = b_get_local_var_offset()
|       |               if return value (non-void function)
|_______|               offset -= 8;  subtract 8 from offset
                        for each local var decl, decrease the offset to make room for the new variable
                            size based on size and alignment requirements of the local var,
                            then install with this new offset
        var
        a: Integer;
            Decrease offset by 4, with this new offset
        b:Real;
            decrease offset by 12 so that b is 8-byte aligned

        ****i asked in class, we are allowed to just have everything use offset 8 to keep things simple. even char, whitch is only 1 byte
        }

    <------------b_func_prologue()
statement_part:
    {
    for each formal param, call b_store_formal_param

    }
    <-----------b_func_epilogue()

============================April 8th=================================================================================================================================

entering and exiting function bodies:

ONCE YOU KNOW FUNCTION NAME STORE IT SOMEWHERE GLOBALY, NOT ON THE SYMANTIC STACK (GRAMMAR)

  func_decl:
    func_heading semi:
          {.......}
      any_decl_part /* var decls for local vars*/
          {
            b_func_prologue()
            for each formal parameter (in left-right order)
              call b_store_formal_param()  /*returns an offset, check with offset in sysm table to check for bugs in our compiler*/
            if function (not a precedure, aka, has a return)
              b_alloc_return_value()
              *He Draws a picture of the stack @ about 11mins*
              b_alloc_local_vars( size )
          }

      statement_part semi
          {
            b_prepare_return( return type )  //TYVOID for procedures
            b_func_epilogue(func name)
          }

Evaluating expresions in a local block
        st_get_current_block()   if curr is greater than 1, then your in a local block

    x := y + z

    y is global (GDECL in symtable)
    b_push_ext_addr("y")
    y is a l-value ----> b_deref() into a r-value for the +

    z is a local (LDECL, use offset)
    b_push_loc_addr(offset)

Setting the return value of a function

    function fact( n:Integer ): Integer;

    begin
      if n=0 then
          fact := 1
      else
          fact := n * fact(n-1)
    end;

    /*function name on left hand side of assignment sets the return value*/
    so only exception to the assignment rules, if in a function and the left hand side matches the function name,
      then this is setting the return value, not a normal assignment
      we need the global function name variable to check this

      so use b_set_return()      ---still check for valid type converstions
        instead of b_assign()


      function foo : Real;          foo has no parameters
        foo := foo;                 set return value :=  call to foo  (weird but, legal)


Accessing var parameters
    Var
      x,y:Integer

    procedure swap(var a,b:Integer);
        var
          temp:Integer;

        begin {swap //this is a comment}
          temp := a;
          a := b;
          b := temp
        end; {swap}

    begin
      x := 6;
      y := 28;
      swap(x,y);

      {x is 28, and y is 6}
    end;

-------------------------------------
in swap                             lets say a's offset is 0

    temp := a;        b_push_loc_addr(-28) "wherever temp's offset is"

                    --b_push_loc_addr(0)  "this will push the address of a onto the stack"
      push 6        | b_deref(TYPTR)   "now we have the l-val of x on the stack"
      onto stack    --b_deref(TYSIGNEDLONGINT)  "now we have the r-val of x, which is 6"

  a  :=    b          when a var parameter is accessed, after b_push_loc_addr(offset), immediately call
  | {x:=y} |          b_deref(TYPTR), result is still considered an l-value of the type pf the var parameter declared
  |        |
  |        |->deref twice
  |                  |
  |->deref           |
      |              |
      |-->b_assign<--|

------------------------------------------
Simple statements

    simple_statement:
        empty_stmt   {}     ---semi colon only seperates stements, last one doesnt need it, but it can have one
        | assignment_or_call_stmt
        | standard_procedure_stmt
        | statement_extenstions  {}  ---- we dont use, not part of standard pascal
        ;

    assignment_or_call_stmt:
        variable_of_function_access_maybe_assignment  rest_of_statement
        ;

    EXAMPLES:
        x   := y + z
        |  |________|
        |      |
        |     rest_of_statement:  LEX_ASSIGN expression
        |                         | /*empty*/   rest_of_statement could be empty
        |
    variable_of_function_access_maybe_assignment

        (*in a function*)
        fact := 6

        swap(x,y) <-----procedure calls
        readNextVal <----|

        foo(x)^ := 6

        foo(x)  returns a r-value of pointer type
        foo(x)^  makes it a l-value of object type


    variable_of_function_access_maybe_assignment:
        identifier  {var name or
                     parameterless procedure call or
                     name of current function (for setting return)
                     }
        | address_operator variable_or_fnc_access {} /*not used*/
        | var_or_fnc_access_no_id      {like with foo(x)^ like above example}
        ;

    var_or_fcn_access_no_id
          p_OUTPUT                        {not used}
        | p_INPUT                         {not used}
        | var_or_fnc_access '.' new_id    {not used}
        | '(' expression ')'              {$$ = $2;}
        | var_or_fnc_access pointer_char
                          p^ := 6
        | var_or_func_access '[' index_exp_list ']'   {for project 3, not used in part 2. for array accesses}
        | var_or_fnc_access_no_std_fnc '(' actual_param_list ')'  {function call} expr
        | p_NEW '(' var_access_or_typename ')'        {like a malloc in pascel}

============================Assumptions=================================================================================================================================

A subrange will only ever exist with integer bounds.

It doesn't matter that the symtab dump command outputs the type of pascal variables as their C equivalents (e.g. A real has type double when printed out via msg() command)

============================TO DO========================================================================================================================================

Handle unresolved pointers:
(for each, get the id by calling ty_query_ptr(), then look up the id in the symbol table to get the stdr (which must be a TYPENAME), then call ty_resolve_ptr()

Check grammar for mistakes when building basic types. It seems the wrong C equivalent is being passed. REALS vs INTS
