functions he said we would need for Project part 1:

SYMBOL TABLE FUNCTIONS:
    st_enter_id
        enroll/retrieve an ID structure (ST_ID)
        DOES NOT INSTALL

    st_lookup(id, &block)
        block = address of an L value?!?!
        he said make sure you always supply one
        enter scope, block# increases
        leave scope, block# decreases
        project part one, everything is global, so only 1 block (block 1)
            have to pass in something tho, so it can set that memory address, even if user
            isnt going to use, otherwise it could trash some random memory and create seg faults
            just make a unused var and pass in its address
        return data record (ST_DR) for the id, if installed (otherwise return null)

    st_install
        installs an id with a data record into the symtab

    st_get_id_str
        returns actual string (char *) of an ID.

    stdr_alloc
        allocates a new, uninitialized data record.
        returns new record
        call this, then fill in fields of the record, then st_install

    st_get_cur_block
        probably not used till next project part.
        returns current block number.

TYPES MODULE:
    for building and analyzing structures for supporting Pascal types
    originaly built for a c compiler (effects the function names)

    ty_build
        type building functions

    ty_build_array, ty_build_ptr, ty_build_func, ty_build_basic (TYPETAG)
    ty_build_unresolved_ptr, ty_build_subrange

    Pascal basic types equivalent:
        Pascal   -  C
        Integer  -  long int
        Char     -  unsigned char
        Boolean  -  char (signed)   0=False and 1=True
        Real     -  double
        Single   -  float

    typetags
        TYSIGNEDLONGINT
        TYPTR            - pointer type
        TYARRAY          - array types
        TYFUNC           - func types

    type structure (TYPE)
                 for an array:
                 typetag
                 list of index types - linked list  (1D, 2D, 3D arrays info also)
                 elementtype     - what type is the element in the array

        ex:
            var
            a : array[2..4,3..10] of Real
            ----------------------------
            2..4  = subrange of Integer
            3..10 = subrange of Integer
                    Integer = base type
                        call ty_build_basic to get basic type
                        then ty_build_subrange, include basetype from basic
                        include upper and lower limits (the 2,4 and the 3,10)
            typetag = TYARRAY
            index list = 2 elements = both subranges of Integer
            element type = Real

        you can assume all index types are integer subranges
        lowerbound needs to be less than or equal to upperbound
                                            or symantic error

        cant have an array of functions.
        TYFUNC, not a data type
        but can have pointers to function types.


        ty_query(TYPE)
            returns TYPETAG

        depending on typetag (use a switch maybe)
         ty_query_array
         ty_query_ptr
         ty_query_func

BACK END:
    outputting assembly code (x86)
    architecture - independent interface

    only need two functions for PART 1:

        b_global_decl(id, align, size)
            -only put label down, doesnt allocate memory

        b_skip(size)
            -adds allocated memory

        -----generaly used together (most the time)

    Alignment & size:
        SIMPLE TYPES:
        type    alignment   size
        -------------------------
        Char         1        1
        Boolean      1        1
        Integer      4        4
        Real         8        8
        Single       4        4
        Pointer      4        4

        Alignment required for and array is the same
        as its element type align requirement
            (if element is another array, recursive call)

        Size of an array equals
            (size of the element type) * (product of index type ranges)
            range 4..6 = 3
            low..high = high - low + 1

        alignment and size of functions is undefined
                (compiler error if trying to compute)

        backend knows about type tags, but doesnt know about the symbol table


MESSAGE MODULE:
    all output, except assembly code

    error- outputing compiler errors.
        semantic error with Pascal source code, not us
        try to keep parseing to find multiple in one file
        Possible Semantic errors:
            duplicate declarations (same id)
            trying to re-declare
            calling func with wrong inputs (number or type)

    bug - output bug in our compiler (our code)
        says "BUG" *our message* then aborts
    warn- compiler warning
        something is probably wrong, but still can compile/run
        (probably wont use this)
    fatal - fatal errors, runnign out of mem, ect
    msg
    msgn

    error and bug used most often
    all give newline like printf, except msg


undeclared pointers:
    a = Integer;     ty_build_basic(TYSIGNEDLONGINT)
    ap = ^a;        DONT lookup and build that
                    ty_build_unresolved_pt()
    fp = ^foo;
    foo = array[0..10] of ^bar;
    bar = Real;
    ------------------------------
    Reslove all the unresolved pointer types in on GO, at the end
    maintain global linked list of unresolved
        return val of ty_build_unresolved must go onto the list
        use TYPE_LIST, TLIST_NODE?  -- types.h
        ty_resolve_ptr for each





We need to use the modules, but cant modify them. only exception is to add include
statements to allow for different data types in c (like in scan.l and gram.y)

=============================March 16==========================================================================================

type

new identifier      type denoter
______________  =   ____________;

"Enroll" every (new) identifier into the symbol table:
    ST_ID st_enter_id(char *str);  <===parameter is text of the identifier
    ^
    This function returns a pointer to a symbol table record that acts as "enrollment papers"

      *The symbol table enforces unique identifiers, therefore an identifier must be enrolled as soon as possible when it is found
        It also allows us to test equality of identifiers by testing pointer equivalence



enroll    vs    install

    enroll any # of times

    when you install you produce a symbol table data record(ST_DR), fill in the fields, and call st_install(  )

    EXAMPLE:
        type
            IntArray = array[1..10] of Integer; ('array[1..10] of Integer' is a TYPE)

            as soon as you recognize IntArray you enroll is, but once you've processed the entire line, you
            install IntArray(ST_ID) into the symbol table as a TYPENAME with the corresponding type(TYPE) by calling st_install
                  mystDR = st_stdr_alloc(); <== new ST_DR
                  //fill in the fields appropriately
                    st_install(mystDR);//returns whether or not the install was correct, based on whether or not you are attempting to install a duplicate

===============================================================================================================================

==========================March 18=============================================================================================

Symbol Table - supports storing & retrieving information about user defined identifiers

st_lookup - looks up an identifier in the symbol table by the ST_ID and returns the complete data record (only if it is installed, otherwise returns null)

===========================March 30====================================================================================================

we should store stuff on the symantic stack (good for us, not required)

    var
    a,b,c : Integer        --- a,b,c is an id_list

    Prototype:
    struct for ListOfIds;
    ListOfIds addToList(ST_ID, ListOfIds);
            //makes the added one new root of linked list
            // and passes a pointer to the new head back out
    %type <y_listOfIds> id_list  //in preamble of grammar (bison)

    id_list:
        id              {$$ = addToList($1,NULL);}
        | id_list , id  {$$ = addToList($3, $1);}

    -------------
    var_decl:
        id_list ":" type_denoter
                    {for each id on the list $1:
                        st_lookup to see if previously installed
                            if so, error (duplicate definition)
                            otherwise, get a new ST_DR
                                stdr_alloc() (dont call malloc ourselves)
                                fill in the feilds:
                                    id is the current id (from for/while loop)
                                    tag is GDECL
                                    type is $3
                                st_install() to install to symbol table
                            Backend:
                                computer size and alignment based on type
                                (should be data types, i.e., not function or procedure types)
                                b_gloval_decl()
                                b_skip
                    }//end for loop
                    //this should be a couple function calls
                    //in tree.c/h
                    //there are not real sysntac trees, that will be in part 2
                    //of project.  backend stuff in code.c
                    //anylayzing and computer tree in tree.c

    ST_ID
        return by st_enter_id()
        only the id string
        "enrollment papers"
        --doesnt care what is already installed in system table
    ST_DR
        System table is to keep only one place in memory for each variable
        for installment
            contains
                DOES NOT CONTAIN ST_ID  -- passed sepreately by install function
                type
                GDECL,TYPENAME, ect  (how varable is used)

    ***you can here me asking him about the graphing stuff at 1:07:00, lol**

    SYMANTIC ERRORS:
        a : function : Integer;
            NOT a DATA type, its a function.
            there is a data section and a text section of the pacasl compiler
            so the var section is a data section and functions only in text section

        b: ^function : Integer;  is OK, size=alignment of a pointer type (4bytes)

        WHAT IF:
            a: function : Integer;   this will error
            a: ^function:Interger;   but is this a error then?

                depends wheither we install the first error as a "TYERROR"
                    in TY_build_basic(), then second part will be a duplicate.
                or if we decide not to install because it isnt allowed. then the second decl
                    of a will be unique and accepted.




===============================================================================================================================


    id_list                         $$ = addToList($1, NULL);   $$ = addToList($3, $1);
    typename                        $$ = st_enter_id($1);
    identifier                      $$ = st_enter_id($1);
    new_identifier                  $$ = $1;
    new_identifier_1 (LEX_ID production only)  $$ = st_enter_id($1);
    simple_decl                     NOT DONE YET  x3 parts
    constant (number production only)  $$=$1;
    number                          if($1= '-')$$=-$2; else $$=$2;    $$=$1;
    unsigned_number                 $$=$1;     $$=$1;
    sign                            $$=$1;     $$=$1;
    type_definition_part            NOT DONE YET
    type_definition                 NOT DONE YET
    type_denoter                   $$ = st_lookup($1,&block)->u.typename.type;    $$ = $1; x4 parts
    type_denoter_1                      MISSING?!?!?!? NOT DONE YET
    new_ordinal_type                    NOT DONE YET AND $$ = $1;
    subrange_type                 $$ = ty_build_subrange(ty_build_basic(TYSIGNEDLONGINT),$1,$3);
    new_pointer_type                                      NOT DONE YET
    pointer_domain_type                                   NOT DONE YET
    new_procedural_type                                   NOT DONE YET
    optional_procedural_type_formal_parameter_list        NOT DONE YET
    procedural_type_formal_parameter_list                 NOT DONE YET
    procedural_type_formal_parameter      NOT DONE YET
    new_structured_type                   NOT DONE YET
    array_type                            $$ = ty_build_array($6,$3);
    array_index_list                      $$ = addToArraySubList($1, NULL);     $$ = addToArraySubList($3, $1);
    ordinal_index_type                    $$ = $1;       $$ = $1;
    variable_declaration                  CREATS and INSTALLS vars
    functiontype                          NOT DONE YET

============================April 6th=================================================================================================================================
*declare vars*
function foo(a:INTEGER; var b :REAL): CHAR;

z := foo(x+36, y)
    expecting an *&^ val        (y: must be l-vlaue, do not convert to r-value)
    (deref is necssisary)

when generating code for a function call:
h_alloc_arglist(size)  <--- could just be #args * 8 (8 is max size of any arg)

**STACK**
|_______|
| val   |
|-------|
| size  |  ^ lower address
|-------| <--
|_______|  V higher address


for each actual argumetn (left tp right)
    -generate code to evaluate expression
    -b_load_arg(type tag)         (updates internal counters for back-end, to place in a new place each call instead of overwriting)
end_for
b_funcall_by_name("foo")

*we will need to handle promoting types: like int->real  single->real, ect***

h_alloc_arglist()   and   b_funccall_by_name()
must be matching like opening and closing delimiters EX: "{"and"}"  (even if no arguments)
---function calls can be nested
    EX:   z := foo(x+bar(c), y)

procedures and function decls and definitions:
function_declarations:

function foo(...).Char:External;
    install in symbol table as a GDECL
        storage class is SC_EXTERNAL (possibly EXTERN, or something)
        check_args flag should be FALSE   (for external functions)   --- check args is in the TYPE, not in symtable directly
            (compiler will NOT check arg types and number of args for external functions)

function bar(....) : REAL; Forward   (expected to be defined later on)
            for when functions call eachother and have to be defined in sequence
            installed as a GDECL but with SC_NOSC and cheack_args flag TRUE
                (compiler will check args)
-------------------
function_delaration:
    function_heading semi
        { install function name FDECL
            two possibilities:
                if function name is not already in symbol table: then install it as a fresh FDECL
                if already in the symbolTAB (st_lookup returns a record ST_DR)
                    only allowed situation is previous installment was a GDECL of a function of the same type that is not external
                        this would be a forward decl (look at the storage class)
                    anything else is a symantic error
                        if FDECL then duplicate declaration
                        not a function
                        func but wrong args or return type (dont match)

        st_enter_block()
            enters a new namespace or new "scope"
            any decls from now on are local

            b_init_formal_param_offset()
            install parameters into the symbol table as PDECL (left to right)
                    with offsets (ints)(from the currrent frame pointer at runtime)

            offset value is obtained by calling b_get_formal_param_offset(type tag)  offset is installed in table?!
        }

    any_declaration_part:
        //we wont deal with local consts
        var decl part only
        {
        install vars as local using LDECL
        st_get_block() is greater than 1, then you are in a local block
            block 0 is for installing integer and REAL, ect (install scope)
            global block is 1
        store by offset, computer these ourselves

**STACK**
|_______|
| local |
| vars  |       *offset is 8 byte aligned
|-------| <---- offset = b_get_local_var_offset()
|       |               if return value (non-void function)
|_______|               offset -= 8;  subtract 8 from offset
                        for each local var decl, decrease the offset to make room for the new variable
                            size based on size and alignment requirements of the local var,
                            then install with this new offset
        var
        a: Integer;
            Decrease offset by 4, with this new offset
        b:Real;
            decrease offset by 12 so that b is 8-byte aligned

        ****i asked in class, we are allowed to just have everything use offset 8 to keep things simple. even char, whitch is only 1 byte
        }

    <------------b_func_prologue()
statement_part:
    {
    for each formal param, call b_store_formal_param

    }
    <-----------b_func_epilogue()
============================Assumptions=================================================================================================================================

A subrange will only ever exist with integer bounds.

It doesn't matter that the symtab dump command outputs the type of pascal variables as their C equivalents (e.g. A real has type double when printed out via msg() command)

============================TO DO========================================================================================================================================

Handle unresolved pointers:
(for each, get the id by calling ty_query_ptr(), then look up the id in the symbol table to get the stdr (which must be a TYPENAME), then call ty_resolve_ptr()

Check grammar for mistakes when building basic types. It seems the wrong C equivalent is being passed. REALS vs INTS
